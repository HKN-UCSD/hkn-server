/* tslint:disable */
/* eslint-disable */
/**
 * HKN API
 * HKN API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  AttendanceRequest,
  AttendanceRequestFromJSON,
  AttendanceRequestToJSON,
  AttendanceResponse,
  AttendanceResponseFromJSON,
  AttendanceResponseToJSON,
} from '../models';

export interface AttendanceControllerDeleteAttendanceRequest {
  attendeeId: number;
  eventId: number;
}

export interface AttendanceControllerUpdateAttendanceTimesRequest {
  attendeeId: number;
  eventId: number;
  attendanceRequest?: AttendanceRequest;
}

/**
 *
 */
export class AttendanceApi extends runtime.BaseAPI {
  /**
   * Delete attendance
   */
  async attendanceControllerDeleteAttendanceRaw(
    requestParameters: AttendanceControllerDeleteAttendanceRequest
  ): Promise<runtime.ApiResponse<AttendanceResponse>> {
    if (
      requestParameters.attendeeId === null ||
      requestParameters.attendeeId === undefined
    ) {
      throw new runtime.RequiredError(
        'attendeeId',
        'Required parameter requestParameters.attendeeId was null or undefined when calling attendanceControllerDeleteAttendance.'
      );
    }

    if (
      requestParameters.eventId === null ||
      requestParameters.eventId === undefined
    ) {
      throw new runtime.RequiredError(
        'eventId',
        'Required parameter requestParameters.eventId was null or undefined when calling attendanceControllerDeleteAttendance.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.attendeeId !== undefined) {
      queryParameters['attendeeId'] = requestParameters.attendeeId;
    }

    if (requestParameters.eventId !== undefined) {
      queryParameters['eventId'] = requestParameters.eventId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString =
        typeof token === 'function' ? token('TokenAuth', []) : token;

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/api/attendances/`,
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AttendanceResponseFromJSON(jsonValue)
    );
  }

  /**
   * Delete attendance
   */
  async attendanceControllerDeleteAttendance(
    requestParameters: AttendanceControllerDeleteAttendanceRequest
  ): Promise<AttendanceResponse> {
    const response = await this.attendanceControllerDeleteAttendanceRaw(
      requestParameters
    );
    return await response.value();
  }

  /**
   * Update attendance times
   */
  async attendanceControllerUpdateAttendanceTimesRaw(
    requestParameters: AttendanceControllerUpdateAttendanceTimesRequest
  ): Promise<runtime.ApiResponse<AttendanceResponse>> {
    if (
      requestParameters.attendeeId === null ||
      requestParameters.attendeeId === undefined
    ) {
      throw new runtime.RequiredError(
        'attendeeId',
        'Required parameter requestParameters.attendeeId was null or undefined when calling attendanceControllerUpdateAttendanceTimes.'
      );
    }

    if (
      requestParameters.eventId === null ||
      requestParameters.eventId === undefined
    ) {
      throw new runtime.RequiredError(
        'eventId',
        'Required parameter requestParameters.eventId was null or undefined when calling attendanceControllerUpdateAttendanceTimes.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.attendeeId !== undefined) {
      queryParameters['attendeeId'] = requestParameters.attendeeId;
    }

    if (requestParameters.eventId !== undefined) {
      queryParameters['eventId'] = requestParameters.eventId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString =
        typeof token === 'function' ? token('TokenAuth', []) : token;

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/api/attendances/`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: AttendanceRequestToJSON(requestParameters.attendanceRequest),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AttendanceResponseFromJSON(jsonValue)
    );
  }

  /**
   * Update attendance times
   */
  async attendanceControllerUpdateAttendanceTimes(
    requestParameters: AttendanceControllerUpdateAttendanceTimesRequest
  ): Promise<AttendanceResponse> {
    const response = await this.attendanceControllerUpdateAttendanceTimesRaw(
      requestParameters
    );
    return await response.value();
  }
}
